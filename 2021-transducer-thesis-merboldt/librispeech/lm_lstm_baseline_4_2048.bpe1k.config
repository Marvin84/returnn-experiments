#!crnn/rnn.py
# BPE-10K LSTM baseline with 4 LSTM layers with dimension 2048.

import os
from subprocess import check_output
from Util import cleanup_env_var_path
cleanup_env_var_path("LD_LIBRARY_PATH", "/u/zeyer/tools/glibc217")

tf_session_opts = {'allow_soft_placement': True, 'log_device_placement': False}

# flag for sampled softmax
if config.has("use_full_softmax"):
   use_full_softmax = config.bool("use_full_softmax", True)
   print("** use_full_softmax %s" % use_full_softmax)
else:
   use_full_softmax = False

#for evaluation:
  #merboldt@cluster-cn-216 ~irie/setups/librispeech/2018-03-05--lmbpe-zeyer/data-train/re_i128_m2048_m2048_m2048_m2048.sgd_b32_lr0_cl2.newbobabs.d0.0.1350 30s3.7.1_tf_1.14-generic+cuda10.1 ‚ùØ base/returnn/rnn.py eval_test.config ++task eval ++train None ++log /var/tmp/merboldt/log-eval-23 ++load_epoch 36 ++learning_rate_file dummy.eval.txt ++max_seqs 100 ++model /var/tmp/merboldt ++load net-model/network.036

# task
use_tensorflow = True
task = "train"
device = "gpu"
multiprocessing = True
update_on_device = True

# Workaround for openblas hanging:
# * https://github.com/tensorflow/tensorflow/issues/13802
# * https://github.com/rwth-i6/returnn/issues/323#issuecomment-725384762
patch_atfork = True

_cf_cache = {}

def cf(filename):
    """Cache manager"""
    if filename in _cf_cache:
        return _cf_cache[filename]
    if check_output(["hostname"]).strip() in ["cluster-cn-211", "sulfid"]:
        print("use local file: %s" % filename)
        return filename  # for debugging
    cached_fn = check_output(["cf", filename]).strip().decode("utf8")
    assert os.path.exists(cached_fn)
    _cf_cache[filename] = cached_fn
    return cached_fn

data_files = {
    "train": "/work/asr3/zeyer/merboldt/librispeech/lm-bpe1k/librispeech-lm-norm.bpe1k.txt.gz",
    "cv": "/work/asr3/zeyer/merboldt/librispeech/lm-bpe1k/dev.clean.other.bpe1k.txt.gz",
    "test": "/work/asr3/zeyer/merboldt/librispeech/lm-bpe1k/test.clean.other.bpe1k.txt.gz"}
vocab_file = "base/dataset/trans.bpe_1000.vocab.txt"

orth_replace_map_file = ""
num_inputs = 1056

train_num_seqs = 40418260
train_epoch_split = 4

epoch_split = {"train": train_epoch_split, "cv": 1, "test": 1}
seq_order = {
    "train": "random",
    "cv": "sorted",
    "test": "default"}

def get_dataset(data):
    assert data in ["train", "cv", "test"]
    return {
        "class": "LmDataset",
        "corpus_file": lambda: cf(data_files[data]),
        "orth_symbols_map_file": lambda: cf(vocab_file),
        "orth_replace_map_file": orth_replace_map_file,
        "word_based": True,
        "seq_end_symbol": "<sb>",
        "auto_replace_unknown_symbol": False,
        "unknown_symbol": "<UNK>",
        "add_delayed_seq_data": True,
        "delayed_seq_data_start_symbol": "<sb>",
        "seq_ordering": seq_order[data],
        "partition_epoch": epoch_split[data]
    }

train = get_dataset("train")
dev = get_dataset("cv")
cache_size = "0"
window = 1

# network
# (also defined by num_inputs & num_outputs)
num_outputs = {"data": {"dim": num_inputs, "sparse": True, "dtype": "int32"}}  # sparse data
num_outputs["delayed"] = num_outputs["data"]
target = "data"
network = {
"input": {"class": "linear", "n_out": 128, "activation": "identity",
          "forward_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "from": ["data:delayed"]},
"lstm0": {"class": "rec", "unit": "lstm",
          "forward_weights_init" : "random_normal_initializer(mean=0.0, stddev=0.1)",
          "recurrent_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "bias_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "n_out": 2048, "dropout": 0.0, "L2": 0.0, "direction": 1, "from": ["input"]},
"lstm1": {"class": "rec", "unit": "lstm",
          "forward_weights_init" : "random_normal_initializer(mean=0.0, stddev=0.1)",
          "recurrent_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "bias_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "n_out": 2048, "dropout": 0.0, "L2": 0.0, "direction": 1, "from": ["lstm0"]},
"lstm2": {"class": "rec", "unit": "lstm",
          "forward_weights_init" : "random_normal_initializer(mean=0.0, stddev=0.1)",
          "recurrent_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "bias_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "n_out": 2048, "dropout": 0.0, "L2": 0.0, "direction": 1, "from": ["lstm1"]},
"lstm3": {"class": "rec", "unit": "lstm",
          "forward_weights_init" : "random_normal_initializer(mean=0.0, stddev=0.1)",
          "recurrent_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "bias_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "n_out": 2048, "dropout": 0.0, "L2": 0.0, "direction": 1, "from": ["lstm2"]},
"output": {"class": "softmax", "dropout": 0.0, "use_transposed_weights": True,
           "forward_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
           "bias_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
           "loss": "ce", "target": "data", "from": ["lstm3"]}
}

batching = "random"
batch_size = 1350
max_seq_length = 1350
max_seqs = 32
chunking = "0"
num_epochs = 50
gradient_clip_global_norm = 2.
gradient_noise = 0.
learning_rate = 1.
learning_rate_control = "newbob_rel"
learning_rate_control_relative_error_relative_lr = False
newbob_multi_num_epochs = train_epoch_split
newbob_relative_error_div_by_old = True

newbob_learning_rate_decay = 0.9
newbob_relative_error_threshold = -0.005
newbob_multi_update_interval = 1
learning_rate_control_error_measure = "dev_score_output:exp"


learning_rate_file = "newbob.data"
model = "net-model/network"

calculate_exp_loss = True
cleanup_old_models = True

# log
log = "log/crnn.%s.log" % task
log_verbosity = 5

