#!crnn/rnn.py

import os
from subprocess import check_output
from Util import cleanup_env_var_path
cleanup_env_var_path("LD_LIBRARY_PATH", "/u/zeyer/tools/glibc217")

tf_session_opts = {'allow_soft_placement': True, 'log_device_placement': False}

# task
use_tensorflow = True
task = "train"
device = "gpu"
multiprocessing = True
update_on_device = True

_cf_cache = {}

def cf(filename):
    """Cache manager"""
    if filename in _cf_cache:
        return _cf_cache[filename]
    if check_output(["hostname"]).strip() in ["cluster-cn-211", "sulfid"]:
        print("use local file: %s" % filename)
        return filename  # for debugging
    cached_fn = check_output(["cf", filename]).strip().decode("utf8")
    assert os.path.exists(cached_fn)
    _cf_cache[filename] = cached_fn
    return cached_fn

# ASRU: text is preprocessed by concatenating consecutive sentences.
data_files = {
    "train": "/work/asr3/irie/data/switchboard/full_vocab/concat_200/train.concat_200.gz",
    "test": "/work/asr3/irie/data/switchboard/full_vocab/concat_200/hub5_00.concat_200.gz",
    "cv": "/work/asr3/irie/data/switchboard/full_vocab/concat_200/dev.concat_200.gz"}
vocab_file = "/work/asr3/irie/data/switchboard/vocabmap"

orth_replace_map_file = ""

num_inputs = 30243  # via vocab_file

train_num_seqs = 2392275
train_epoch_split = 1

max_seqs = 4

epoch_split = {"train": train_epoch_split, "cv": 1, "test": 1}
# ASRU: seq_order to get sequences in the original order.
seq_order = {"train": "default_every_n:%i" % max_seqs,
             "cv":  "default_every_n:%i" % max_seqs,
             "test": "default_every_n:%i" % max_seqs}

def get_dataset(data):
    assert data in ["train", "cv", "test"]
    return {
        "class": "LmDataset",
        "corpus_file": lambda: cf(data_files[data]),
        "orth_symbols_map_file": lambda: cf(vocab_file),
        "orth_replace_map_file": orth_replace_map_file,
        "word_based": True,
        "seq_end_symbol": "<sb>",
        "auto_replace_unknown_symbol": True,
        "unknown_symbol": "<unk>",
        "add_delayed_seq_data": True,
        "delayed_seq_data_start_symbol": "<sb>",
        "seq_ordering": seq_order[data],
        "partition_epoch": epoch_split[data]
    }

train = get_dataset("train")
dev = get_dataset("cv")
eval = get_dataset("test")
cache_size = "0"

# network
num_outputs = {"data": {"dim": num_inputs, "sparse": True, "dtype": "int32"}}  # sparse data
num_outputs["delayed"] = num_outputs["data"]
target = "data"
network = {
"input": {"class": "linear", "n_out": 128, "activation": "identity",
          "param_device": "CPU",
          "forward_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "from": ["data:delayed"]},
"lstm0": {"class": "rec", "unit": "nativelstm2", "initial_state": "keep_over_epoch",  # Context carry-over.
          "forward_weights_init" : "random_normal_initializer(mean=0.0, stddev=0.1)",
          "recurrent_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "bias_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "n_out": 2048, "dropout": 0.2, "L2": 0.0, "direction": 1, "from": ["input"]},
"lstm1": {"class": "rec", "unit": "nativelstm2", "initial_state": "keep_over_epoch",  # Context carry-over.
          "forward_weights_init" : "random_normal_initializer(mean=0.0, stddev=0.1)",
          "recurrent_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "bias_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "n_out": 2048, "dropout": 0.4, "L2": 0.0, "direction": 1, "from": ["lstm0"]},
"output": {"class": "softmax",  "dropout": 0.4,
           "forward_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
           "bias_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
           "loss": "ce", "target": "data", "from": ["lstm1"]}
}
# batch size must be set to zero
# and
# max_seq_length must to be unset so that 
# the sequence ordering for context carry-over is preserved.
batching = "random"
batch_size = 0
# max_seq_length = 150
chunking = "0"
num_epochs = 30
gradient_clip_global_norm = 3.
gradient_noise = 0.
learning_rate = 1.
learning_rate_control = "newbob_rel"
learning_rate_control_relative_error_relative_lr = False
newbob_relative_error_div_by_old = True
newbob_multi_num_epochs = train_epoch_split

newbob_learning_rate_decay = 0.5
newbob_relative_error_threshold = -0.02
newbob_multi_update_interval = 1
learning_rate_control_error_measure = "dev_score_output:exp"


learning_rate_file = "newbob.data"
model = "net-model/network"

calculate_exp_loss = True
cleanup_old_models = True

# log
log = "log/crnn.%s.log" % task
log_verbosity = 4

