gpu-job-flag.use-gpu = yes

[*]
configuration.channel    = output-channel
dot.channel              = nil
encoding                 = UTF-8
error.channel            = output-channel, stderr
log.channel              = output-channel
progress.channel         = output-channel
python-home              = <python-env-home>
python-program-name      = <python-bin>
real-time-factor.channel = output-channel
statistics.channel       = output-channel
system-info.channel      = output-channel
time.channel             = output-channel
version.channel          = output-channel
warning.channel          = output-channel, stderr

[*.output-channel]
append     = no
compressed = no
file       = $(LOGFILE)
unbuffered = yes

[flf-lattice-tool.corpus]
audio-dir                      = /
capitalize-transcriptions      = no
file                           = <<<test-corpus-bliss.xml.gz>>>
partition                      = 20
progress-indication            = global
select-partition               = $(TASK)
warn-about-unexpected-elements = yes

[flf-lattice-tool.global-cache]
file      = <global.cache>
read-only = yes

[flf-lattice-tool.lexicon]
file                    = <<<lexicon.xml.gz>>>
normalize-pronunciation = no

[flf-lattice-tool.network]
initial-nodes = segment

[flf-lattice-tool.network.archive-writer]
format = flf
info   = yes
links  = sink:1
path   = lattice.cache.$(TASK)
type   = archive-writer

[flf-lattice-tool.network.evaluator]
algorithm       = bellman-ford
best-in-lattice = yes
links           = sink:0
single-best     = yes
type            = evaluator
word-errors     = yes

[flf-lattice-tool.network.evaluator.edit-distance]
allow-broken-words = no
format             = bliss

[flf-lattice-tool.network.expand]
links = evaluator archive-writer
type  = expand-transits

[flf-lattice-tool.network.recognizer]
add-confidence-score          = no
apply-non-word-closure-filter = no
apply-posterior-pruning       = no
links                         = expand
search-type                   = advanced-tree-search
type                          = recognizer

[flf-lattice-tool.network.recognizer.acoustic-model.allophones]
add-all          = no
add-from-lexicon = yes

[flf-lattice-tool.network.recognizer.acoustic-model.hmm]
across-word-model   = yes
early-recombination = no
state-repetitions   = 1
states-per-phone    = 3

[flf-lattice-tool.network.recognizer.acoustic-model.mixture-set]
feature-scorer-type       = nn-precomputed-hybrid
file                      = <<<acoustic_model.mix>>>
normalize-mixture-weights = no
priori-scale              = 0.7
scale                     = 1.0

[flf-lattice-tool.network.recognizer.acoustic-model.state-tying]
file = <cart.tree.xml.gz>
type = cart

[flf-lattice-tool.network.recognizer.acoustic-model.tdp]
entry-m1.loop = infinity
entry-m2.loop = infinity
scale         = 1.0

[flf-lattice-tool.network.recognizer.acoustic-model.tdp.*]
exit    = 0.0
forward = 0.0
loop    = 3.0
skip    = 30.0

[flf-lattice-tool.network.recognizer.acoustic-model.tdp.silence]
exit    = 20.0
forward = 3.0
loop    = 0.0
skip    = infinity

[flf-lattice-tool.network.recognizer.feature-extraction]
file = feature.flow

[flf-lattice-tool.network.recognizer.feature-extraction.tf-fwd.input-map.info-0]
param-name             = features
seq-length-tensor-name = extern_data/placeholders/data/data_dim0_size
tensor-name            = extern_data/placeholders/data/data

[flf-lattice-tool.network.recognizer.feature-extraction.tf-fwd.loader]
meta-graph-file    = <<<CompileTFGraphJob/output/graph.meta>>>
required-libraries = <<<libs/nativelstm2/tf1.12/NativeLstm2.so>>>
saved-model-file   = <<<models/epoch.250>>>
type               = meta

[flf-lattice-tool.network.recognizer.feature-extraction.tf-fwd.output-map.info-0]
param-name  = log-posteriors
tensor-name = output/output_batch_major

[flf-lattice-tool.network.recognizer.lm]
allow-reduced-history   = yes
max-batch-size          = 8
min-batch-size          = 8
opt-batch-size          = 0
scale                   = 18.0
transform-output-negate = yes
type                    = tfrnn
vocab-file              = <<<lstm_vocabulary>>>
vocab-unknown-word      = <UNK>

[flf-lattice-tool.network.recognizer.lm.input-map.info-0]
param-name             = word
seq-length-tensor-name = extern_data/placeholders/delayed/delayed_dim0_size
tensor-name            = extern_data/placeholders/delayed/delayed

[flf-lattice-tool.network.recognizer.lm.loader]
meta-graph-file    = <<<CompileTFGraphJob/output/graph.meta>>>
required-libraries = <<<libs/nativelstm2/tf1.12/NativeLstm2.so>>>
saved-model-file   = <<<lstmlm/network.040>>>
type               = meta

[flf-lattice-tool.network.recognizer.lm.output-map.info-0]
param-name  = softmax
tensor-name = output/output_batch_major

[flf-lattice-tool.network.recognizer.recognizer]
beam-pruning             = 15
beam-pruning-limit       = 200000
create-lattice           = yes
dominant-path-statistics = yes
lm-lookahead             = yes
lm-lookahead-laziness    = 15
optimize-lattice         = simple
separate-lookahead-lm    = yes
sparse-lm-lookahead      = no
word-end-pruning         = 0.5
word-end-pruning-limit   = 20000

[flf-lattice-tool.network.recognizer.recognizer.lm-lookahead]
cache-size-high        = 3000
cache-size-low         = 2000
history-limit          = 1
lm-lookahead-scale     = 14.0
minimum-representation = 1
tree-cutoff            = 30

[flf-lattice-tool.network.recognizer.recognizer.lookahead-lm]
file  = <<<LibriSpeech/lm/4-gram.arpa.gz>>>
scale = 1.0
type  = ARPA

[flf-lattice-tool.network.segment]
links = 1->recognizer:1 0->archive-writer:1 0->evaluator:1
type  = speech-segment

[flf-lattice-tool.network.sink]
error-on-empty-lattice = no
type                   = sink
warn-on-empty-lattice  = yes
