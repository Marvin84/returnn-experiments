#!rnn.py

import os
import numpy
from subprocess import check_output, CalledProcessError
from Pretrain import WrapEpochValue

# task
use_tensorflow = True
task = config.value("task", "train")
device = "gpu"
multiprocessing = True
update_on_device = True

debug_mode = False
beam_size = 12

_cf_cache = {}

def cf(filename):
    """Cache manager"""
    if filename in _cf_cache:
        return _cf_cache[filename]
    if debug_mode or check_output(["hostname"]).strip().decode("utf8") in ["cluster-cn-211", "valin"]:
        print("use local file: %s" % filename)
        return filename  # for debugging
    try:
        cached_fn = check_output(["cf", filename]).strip().decode("utf8")
    except CalledProcessError:
        print("Cache manager: Error occured, using local file")
        return filename
    assert os.path.exists(cached_fn)
    _cf_cache[filename] = cached_fn
    return cached_fn


num_inputs = 40  # Gammatone 40-dim
num_outputs = {"target_text": (5102, 1), "data": (num_inputs, 2), "target_text_sprint": (9821, 1)}  # see vocab
target = "target_text"

# data
if task == "search":
    num_inputs = 40  # Gammatone 40-dim
    num_outputs = {"orth_classes": (5102, 1), "data": (num_inputs, 2)}  # see vocab
    target = "orth_classes"
    data = "data"

EpochSplit = 2


def get_sprint_dataset(data, is_search=False):
    assert data in {"train", "dev", "test"}
    epoch_split = {"train": EpochSplit}.get(data, 1)
    files = {}
    files["features"] = "/work/smt3/bahar/st-data/librispeech/ready-corpus-duplicate/gt.%s.bundle" % data
    files["config"] = "/u/bahar/workspace/asr/librispeech/end2end-en-fr-asr--2018-11-22/config/training.config"
    files["corpus"] = "/work/smt3/bahar/st-data/librispeech/ready-corpus-duplicate/%s_duplicate.bpe.10k.xml" % data
    if data in ["train", "dev"]:
       files["segments"] = {"train": "/work/smt3/bahar/st-data/librispeech/ready-corpus-duplicate/seg_train",
                             "dev": "/work/smt3/bahar/st-data/librispeech/ready-corpus-duplicate/seg_dev"}[data]
    for k, v in sorted(files.items()):
        assert os.path.exists(v), "%s %r does not exist" % (k, v)
    estimated_num_seqs = {"train": 94542, "dev": 1071, "test": 2048}  # wc -l segment-file

    args = [
        "--config=" + files["config"],
        lambda: "--*.corpus.file=" + cf(files["corpus"]),
        lambda: "--*.corpus.segments.file=" + (cf(files["segments"]) if "segments" in files else ""),
        "--*.corpus.segment-order-shuffle=false",
        "--*.segment-order-sort-by-time-length=false",
        "--*.segment-order-sort-by-time-length-chunk-size=-1", #%i" % {"train": (EpochSplit or 1) * 1000}.get(data, -1),
        lambda: "--*.feature-cache-path=" + files["features"],
        #"--*.log-channel.file=/dev/null",
        "--*.log-channel.file=sprint-%s.log" % data,
        "--*.log-channel.unbuffered=true",
        "--*.window-size=1",
    ]
    d = {
        "class": "ExternSprintDataset", "sprintTrainerExecPath": "/work/smt3/bahar/expriments/st/iwslt2018/features/direct-st/shared/sprint-executables/nn-trainer",
        "sprintConfigStr": args,
        "partitionEpoch": 1,
        "estimated_num_seqs": estimated_num_seqs[data] if data in estimated_num_seqs else None,
        "input_stddev": 3.,
        "orth_vocab": {
        "vocab_file": "/work/smt3/bahar/st-data/librispeech/ready-corpus-duplicate/mt-dataset/target.vocab.pkl" if is_search else "/work/smt3/bahar/st-data/librispeech/ready-corpus-duplicate/en.vocab.10k.lc.asr",
        "unknown_label": "<UNK>",
        "seq_postfix": [0] }
    }
    return d

train_sprint = get_sprint_dataset("train")
dev_sprint = get_sprint_dataset("dev")  ### set it during training
devset = get_sprint_dataset("dev", is_search=True)
testset = get_sprint_dataset("test", is_search=True)

translationDataset = {"class": "TranslationDataset",
                      "path": "/work/smt3/bahar/st-data/librispeech/ready-corpus-duplicate/mt-dataset/",
                      "file_postfix": "train",  
                      "unknown_label": "<UNK>",
                      "source_postfix": " </S>",
                      "target_postfix": " </S>"}
                      #"seq_ordering": "sorted"}

train_translation = translationDataset.copy()

train = {"class": "MetaDataset", "seq_list_file": "/work/smt3/bahar/st-data/librispeech/ready-corpus-duplicate/seq_train.pkl", "seq_lens_file": "",
    "datasets": {"sprint": train_sprint, "translation": train_translation},
    "data_map": {"data": ("sprint", "data"),
                 "target_text_sprint": ("sprint", "orth_classes"),
                 "source_text": ("translation", "data"),
                 "target_text": ("translation", "classes")},
    "data_dims": {"data": [40, 2],
                  "target_text_sprint": [9821, 1],
                  "source_text": [2214, 1],
                  "target_text": [5102, 1]},
    "seq_ordering": "random",
    "partition_epoch": EpochSplit
}


dev_translation = translationDataset.copy()
dev_translation["file_postfix"] = "dev"
dev = train.copy()
dev["seq_list_file"] = "/work/smt3/bahar/st-data/librispeech/ready-corpus-duplicate/seq_dev.pkl"
dev["datasets"] = {"sprint": dev_sprint, "translation": dev_translation}
dev["partition_epoch"] = None

cache_size = "0"
window = 1

def summary(name, x):
    """
    :param str name:
    :param tf.Tensor x: (batch,time,feature)
    """
    import tensorflow as tf
    # tf.summary.image wants [batch_size, height,  width, channels],
    # we have (batch, time, feature).
    img = tf.expand_dims(x, axis=3)  # (batch,time,feature,1)
    img = tf.transpose(img, [0, 2, 1, 3])  # (batch,feature,time,1)
    tf.summary.image(name, img, max_outputs=10)
    tf.summary.scalar("%s_max_abs" % name, tf.reduce_max(tf.abs(x)))
    mean = tf.reduce_mean(x)
    tf.summary.scalar("%s_mean" % name, mean)
    stddev = tf.sqrt(tf.reduce_mean(tf.square(x - mean)))
    tf.summary.scalar("%s_stddev" % name, stddev)
    tf.summary.histogram("%s_hist" % name, tf.reduce_max(tf.abs(x), axis=2))


def _mask(x, axis, pos, max_amount):
    """
    :param tf.Tensor x: (batch,time,feature)
    :param int axis:
    :param tf.Tensor pos: (batch,)
    :param int max_amount: inclusive
    """
    import tensorflow as tf
    ndim = x.get_shape().ndims
    n_batch = tf.shape(x)[0]
    dim = tf.shape(x)[axis]
    amount = tf.random_uniform(shape=(n_batch,), minval=1, maxval=max_amount + 1, dtype=tf.int32)
    pos2 = tf.minimum(pos + amount, dim)
    idxs = tf.expand_dims(tf.range(0, dim), 0)  # (1,dim)
    pos_bc = tf.expand_dims(pos, 1)  # (batch,1)
    pos2_bc = tf.expand_dims(pos2, 1)  # (batch,1)
    cond = tf.logical_and(tf.greater_equal(idxs, pos_bc), tf.less(idxs, pos2_bc))  # (batch,dim)
    cond = tf.reshape(cond, [tf.shape(x)[i] if i in (0, axis) else 1 for i in range(ndim)])
    from TFUtil import where_bc
    x = where_bc(cond, 0.0, x)
    #x = tf.where(cond, 0.0, x)
    return x


def random_mask(x, axis, min_num, max_num, max_dims):
    """
    :param tf.Tensor x: (batch,time,feature)
    :param int axis:
    :param int|tf.Tensor min_num:
    :param int|tf.Tensor max_num: inclusive
    :param int max_dims: inclusive
    """
    import tensorflow as tf
    n_batch = tf.shape(x)[0]
    num = max_num #tf.random_uniform(shape=(n_batch,), minval=min_num, maxval=max_num + 1, dtype=tf.int32)
    # https://github.com/tensorflow/tensorflow/issues/9260
    # https://timvieira.github.io/blog/post/2014/08/01/gumbel-max-trick-and-weighted-reservoir-sampling/
    z = -tf.log(-tf.log(tf.random_uniform((n_batch, tf.shape(x)[axis]), 0, 1)))
    _, indices = tf.nn.top_k(z, tf.reduce_max(num))
    # indices should be sorted, and of shape (batch,num), entries (int32) in [0,dim)
    # indices = tf.Print(indices, ["indices", indices, tf.shape(indices)])
    _, x = tf.while_loop(
        cond=lambda i, _: tf.less(i, tf.reduce_max(num)),
        body=lambda i, x: (
            i + 1,
            tf.where(
                tf.less(i, num),
                _mask(x, axis=axis, pos=indices[:, i], max_amount=max_dims),
                x)),
        loop_vars=(0, x))
    return x


def transform(x, network):
    import tensorflow as tf
    # summary("features", x)
    x = tf.clip_by_value(x, -3.0, 3.0)
    #summary("features_clip", x)
    def get_masked():
        x_masked = x
        x_masked = random_mask(x_masked, axis=1, min_num=1, max_num=2, max_dims=40)
        x_masked = random_mask(x_masked, axis=2, min_num=1, max_num=1, max_dims=num_inputs // 8)
        #summary("features_mask", x_masked)
        return x_masked
    x = network.cond_on_train(get_masked, lambda: x)
    return x

# network
# (also defined by num_inputs & num_outputs)
#target = "target_text"
EncKeyTotalDim = 1024
AttNumHeads = 1
EncKeyPerHeadDim = EncKeyTotalDim // AttNumHeads
EncValueTotalDim = 2048
EncValuePerHeadDim = EncValueTotalDim // AttNumHeads
LstmDim = EncValueTotalDim // 2

network = {
"source": {"class": "eval", "eval": "self.network.get_config().typed_value('transform')(source(0), network=self.network)"},

"model0_lstm0_fw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": 1, "from": ["source"] },
"model0_lstm0_bw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": -1, "from": ["source"] },
"model0_lstm0_pool": {"class": "pool", "mode": "max", "padding": "same", "pool_size": (3,), "from": ["model0_lstm0_fw", "model0_lstm0_bw"], "trainable": False},

"model0_lstm1_fw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": 1, "from": ["model0_lstm0_pool"], "dropout": 0.3 },
"model0_lstm1_bw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": -1, "from": ["model0_lstm0_pool"], "dropout": 0.3 },
"model0_lstm1_pool": {"class": "pool", "mode": "max", "padding": "same", "pool_size": (2,), "from": ["model0_lstm1_fw", "model0_lstm1_bw"], "trainable": False},

"model0_lstm2_fw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": 1, "from": ["model0_lstm1_pool"], "dropout": 0.3 },
"model0_lstm2_bw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": -1, "from": ["model0_lstm1_pool"], "dropout": 0.3 },
"model0_lstm2_pool": {"class": "pool", "mode": "max", "padding": "same", "pool_size": (1,), "from": ["model0_lstm2_fw", "model0_lstm2_bw"], "trainable": False},

"model0_lstm3_fw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": 1, "from": ["model0_lstm2_pool"], "dropout": 0.3 },
"model0_lstm3_bw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": -1, "from": ["model0_lstm2_pool"], "dropout": 0.3 },
"model0_lstm3_pool": {"class": "pool", "mode": "max", "padding": "same", "pool_size": (1,), "from": ["model0_lstm3_fw", "model0_lstm3_bw"], "trainable": False},

"model0_lstm4_fw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": 1, "from": ["model0_lstm3_pool"], "dropout": 0.3 },
"model0_lstm4_bw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": -1, "from": ["model0_lstm3_pool"], "dropout": 0.3 },
"model0_lstm4_pool": {"class": "pool", "mode": "max", "padding": "same", "pool_size": (1,), "from": ["model0_lstm4_fw", "model0_lstm4_bw"], "trainable": False},

"model0_lstm5_fw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": 1, "from": ["model0_lstm4_pool"], "dropout": 0.3 },
"model0_lstm5_bw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": -1, "from": ["model0_lstm4_pool"], "dropout": 0.3 },
"model0_lstm5": {"class": "copy", "from": ["model0_lstm5_fw", "model0_lstm5_bw"]},

"lstm6_fw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": 1, "from": ["model0_lstm5"], "dropout": 0.3 },
"lstm6_bw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": -1, "from": ["model0_lstm5"], "dropout": 0.3 },

"encoder": {"class": "copy", "from": ["lstm6_fw", "lstm6_bw"]},  # dim: EncValueTotalDim
"enc_ctx": {"class": "linear", "activation": None, "with_bias": True, "from": ["encoder"], "n_out": EncKeyTotalDim},  # preprocessed_attended in Blocks
"inv_fertility": {"class": "linear", "activation": "sigmoid", "with_bias": False, "from": ["encoder"], "n_out": AttNumHeads},
"enc_value": {"class": "split_dims", "axis": "F", "dims": (AttNumHeads, EncValuePerHeadDim), "from": ["encoder"]},  # (B, enc-T, H, D'/H)

"output": {"class": "rec", "from": [], 'cheating': config.bool("cheating", False), "unit": {
    'output': {'class': 'choice', 'target': target, 'beam_size': beam_size, 'cheating': config.bool("cheating", False), 'from': ["model1_output_prob"], "initial_output": 0},
    "end": {"class": "compare", "from": ["output"], "value": 0},
    'model1_target_embed': {'class': 'linear', 'activation': None, "with_bias": False, 'from': ['output'], "n_out": 512, "initial_output": 0},  # feedback_input
    "model1_weight_feedback": {"class": "linear", "activation": None, "with_bias": False, "from": ["prev:model1_accum_att_weights"], "n_out": EncKeyTotalDim},
    "model1_s_transformed": {"class": "linear", "activation": None, "with_bias": False, "from": ["model1_s"], "n_out": EncKeyTotalDim},
    "model1_energy_in": {"class": "combine", "kind": "add", "from": ["base:enc_ctx", "model1_weight_feedback", "model1_s_transformed"], "n_out": EncKeyTotalDim},
    "model1_energy_tanh": {"class": "activation", "activation": "tanh", "from": ["model1_energy_in"]},
    "model1_energy": {"class": "linear", "activation": None, "with_bias": False, "from": ["model1_energy_tanh"], "n_out": AttNumHeads},  # (B, enc-T, H)
    "model1_att_weights": {"class": "softmax_over_spatial", "from": ["model1_energy"]},  # (B, enc-T, H)
    "model1_accum_att_weights": {"class": "eval", "from": ["prev:model1_accum_att_weights", "model1_att_weights", "base:inv_fertility"],
        "eval": "source(0) + source(1) * source(2) * 0.5", "out_type": {"dim": AttNumHeads, "shape": (None, AttNumHeads)}},
    "model1_att0": {"class": "generic_attention", "weights": "model1_att_weights", "base": "base:enc_value"},  # (B, H, V)
    "model1_att": {"class": "merge_dims", "axes": "except_batch", "from": ["model1_att0"]},  # (B, H*V)
    "model1_s": {"class": "rnn_cell", "unit": "LSTMBlock", "from": ["prev:model1_target_embed", "prev:model1_att"], "n_out": EncKeyTotalDim},  # transform
    "model1_readout_in": {"class": "linear", "from": ["model1_s", "prev:model1_target_embed", "model1_att"], "activation": None, "n_out": EncKeyTotalDim},  # merge + post_merge bias
    "model1_readout": {"class": "reduce_out", "mode": "max", "num_pieces": 2, "from": ["model1_readout_in"]},
    "model1_output_prob": {
        "class": "softmax", "from": ["model1_readout"], "dropout": 0.3,
        "target": target, "loss": "ce", "loss_opts": {"label_smoothing": 0.1}}
}, "target": target, "max_seq_len": "max_len_from('base:encoder')"},

"decision": {
    "class": "decide", "from": ["output"], "loss": "edit_distance", "target": target,
    "loss_opts": {
        #"debug_print": True
        }
    },
}

#network_additional_ctc = {
#    "ctc": {"class": "softmax", "from": ["encoder"], "loss": "ctc", "target": "target_text_sprint",
#    "loss_opts": {"beam_width": 1, "ctc_opts": {"ignore_longer_outputs_than_inputs": True}}}
#}

#if task != "search":
    #network.update(network_additional_ctc)

# models for ensembling
ens_model_file_0 = "/work/smt2/bieschke/models/attention-encoder-decoder/librispeech/asr/network.056"
ens_model_prefix_0 = "model0_"
ens_model_file_1 = "/work/smt2/bieschke/models/attention-encoder-decoder/librispeech/mt/network.042"
ens_model_prefix_1 = "model1_"

# model 0 is loaded as usual
preload_from_files = {
"model0" : {"filename": ens_model_file_0, "prefix": ens_model_prefix_0, "init_for_train": True},
"model1" : {"filename": ens_model_file_1, "prefix": ens_model_prefix_1, "init_for_train": True},
}


search_output_layer = "decision"
debug_print_layer_output_template = True
debug_add_check_numerics_on_output = False
debug_add_check_numerics_ops = False

# trainer
batching = "random"
log_batch_size = True
batch_size = 18000
max_seqs = 200
max_seq_length = {"target_text": 75}
#chunking = ""  # no chunking
truncation = -1

tf_log_memory_usage = True

num_epochs = 150
model = "net-model/network"
cleanup_old_models = True
gradient_clip = 0
#gradient_clip_global_norm = 1.0
adam = True
optimizer_epsilon = 1e-8
#debug_add_check_numerics_ops = True
#debug_add_check_numerics_on_output = True
stop_on_nonfinite_train_score = False
tf_log_memory_usage = True
gradient_noise = 0.0
learning_rate = 0.0005
#learning_rates = list(numpy.linspace(0.0003, learning_rate, num=10))  # warmup
min_learning_rate = learning_rate / 50.
learning_rate_control = "newbob_multi_epoch"
#learning_rate_control_error_measure = "dev_score_output"
learning_rate_control_relative_error_relative_lr = True
learning_rate_control_min_num_epochs_per_new_lr = 3
use_learning_rate_control_always = True
newbob_multi_num_epochs = 6
newbob_multi_update_interval = 1
newbob_learning_rate_decay = 0.9
learning_rate_file = "newbob.data"

# log
log_verbosity = 5

